#+REVEAL_ROOT: file:///Users/jason/source/reveal.js
#+REVEAL_TRANS: fade
#+REVEAL_HLEVEL: 10
#+OPTIONS:  num:nil toc:1
#+REVEAL_SLIDE_FOOTER: Jason Lewis - @jasonblewis
#+REVEAL_EXTRA_CSS: local.css
* Intro

  Jason Lewis

  owner of a wholesale distribution business in Australia

  Jack of all trades - master of none?
** contact
 - Twittr: @jasonblewis
 - irc: k-man
 - email: jason@dickson.st


** Why am I doing this?
 Wanted a way to replace Crystal Reports with something less proprietary.
** Crystal Reports
 * Pros: 
   - quick to build reports
   - quite easy to customise and make the reports just so
 * Cons: 
   - proprietary
   - distribution of reports difficult
   - win32 only
** Why Dancer2?
Awesome community.

* naive approach
 hand coded tables in TT
*** Demo 1 route handler
#+BEGIN_SRC perl
get '/demo01' => sub {

  my $sth = database->prepare(
        'select * from invoices',
      );
  $sth->execute() or die $sth->errstr;

  my $fields = $sth->{NAME};
  my $invoices = $sth->fetchall_arrayref({});
  
  template 'demo01',
    { title => 'demo01',
      fields => $fields,
      invoices => $invoices,
    };
};
#+END_SRC
*** Demo 1 view
#+BEGIN_SRC html
    <tbody>
	[% FOREACH invoice IN invoices %]
            <tr>
		[% FOREACH field IN fields %]
                    <td>[% invoice.$field %]</td>
		[% END %]
            </tr>
	[% END  %]
    </tbody>
#+END_SRC

* add DataTables to the mix
  hand coded table + DataTables

**  Include the css and js for DataTables in main.tt
in the main.tt layout:
#+BEGIN_SRC html
<!-- DataTables -->
<link rel="stylesheet" href="[% request.uri_base %]/css/jquery.dataTables.min.css">
<script type="text/javascript" src="javascripts/jquery.dataTables.min.js"></script>
#+END_SRC

** call the DataTable enabler after document ready
add the js DataTable call to the view:
#+BEGIN_SRC html
<!-- DataTables -->
<script type="text/javascript">
 $(document).ready(function(){
     $('#example-datatable').DataTable();
 });
</script>
#example is the CSS id of the table you want to make fancy

#+END_SRC
demo 2 example
** add #example CSS id to table
#+BEGIN_SRC html
<table width="80%">
    <thead>
        <tr>
            [% FOREACH field IN fields %]
		<th>[% field %]</th>
            [% END  %]
        </tr>
    </thead>
.
.
.
</table>
#+END_SRC
** add #example CSS id to table
#+BEGIN_SRC html
<table width="80%" id="example-datatable">
    <thead>
        <tr>
            [% FOREACH field IN fields %]
		<th>[% field %]</th>
            [% END  %]
        </tr>
    </thead>
.
.
.
</table>
#+END_SRC
** Hand coded html table with DataTables 
- pros:
  * very configurabe, you can generate the HTML table just how you like it.
  * easy to give rows and columns custom css identifies and classes
- cons:
  * not very reusable, you have to hand code each each report
  * changes to data structure will require updates to the view

* using JSON with DataTables
  build the HTML table headings in javascript and pass a JSON route to DataTables.
DataTables takes care of retreiving the data and filling the table.
 * pros
   - very easy to reuse code
 * cons
   - more difficult to customise your resulting html table
   - formatting result fields more difficult
** build a json route
Include the columns you want to render and the results from the query
#+BEGIN_SRC perl
get '/api/demo03' => sub {
  my $sth = database->prepare(
        'select * from invoices',
      );
  $sth->execute() or die $sth->errstr;

  my $fields = $sth->{NAME};
  my $invoices = $sth->fetchall_arrayref({});
  
  send_as JSON => { columns => [
    { data => 'InvoiceId'},
    { data => 'InvoiceDate'},
    { data => 'CustomerId' },
    { data => 'BillingAddress'}
      ],
    data => $invoices,
  };
};
#+END_SRC
** now for some JavaScript
   build the table headers in javascript, and insert into the DIV #tableDiv
#+BEGIN_SRC javascript
 $( document ).ready( function( $ ) {
     $.ajax({
         "url": '[% json_data_url %]',
         "success": function(json) {
             var tableHeaders = '';  
	     $.each(json.columns, function(i, val){
                 tableHeaders += "<th>" + val.data + "</th>";
             });
             
             $("#tableDiv").html(
	       '<table id="displayTable" class="display compact" cellspacing="0"><thead><tr>'
	       + tableHeaders + '</tr></thead></table>');
             $('#displayTable').DataTable(json);
         },
         "dataType": "json"
     });
 });
#+END_SRC
* DBIx::Class
  returning arrayref and converting to JSON
* styling the table
* table export options
** Users are never satisfied
The minute you show them this they are like "can I export it to Excel?"

Luckily, DataTables makes that easy with the Buttons component.

*** add the css for the Buttons
Install pdfmake:
 #+BEGIN_SRC bash
bower install pdfmake
 #+END_SRC

add the css:
 #+BEGIN_SRC html
   <link rel="stylesheet" 
     type="text/css" 
     href="https://cdn.datatables.net/buttons/1.1.1/css/buttons.dataTables.min.css">
 #+END_SRC

add the js:
#+BEGIN_SRC html
<script src='/bower_components/pdfmake/build/pdfmake.min.js'></script>
<script src='/bower_components/pdfmake/build/vfs_fonts.js'></script>
#+END_SRC
***  update the javascript
#+BEGIN_SRC javascript
json.dom = 'Bfrtip'; // customise the table
json.buttons = ['copy',
                'csv',
                'excel',
                { extend: 'pdfHtml5',
                  text: 'PDF',
                  orientation: 'landscape',
                  pageSize: 'A4',
                  download: 'download',
                  filename: '*',
                  extension: 'pdf'
                },
                'print'];
#+END_SRC
* As yet unresolved challenges
